package com.sh.section02.list.run;

public class Application {
    /*
    ##컬렉션 프레임워크
    1. Collection Framework
    2. 방대한 데이터들을 쉽고 효과적으로 처리할 수 있도록 표준화된 방법을
    제공하는 클래스들의 집합
    3. 데이터를 효율적으로 저장하는 자료구조와 데이터를 효율적으로 처리하는
    알고리즘을 미리 구현

    ##배열과 컬렉션의 차이
    1. 배열
        ㄴ크기에 대한 제약이 많음(크기지정필수,키그변경불가> 새배열 만들고 복사/크게잡으면 메모리낭비)
        ㄴ중간 위치에 추가하거나 삭제할 경우 복잡한 로직의 코드를 작성해야 됨
        ㄴ한 타입의 데이터만 저장 가능
    2. 컬렉션
        ㄴ크기에 대한 제약이 없음(크기지정필수X,유동적으로 크기 변경)
        ㄴ중간 위치에 데이터 추가 및 삭제등을 진행시 복잡한 로직의 코드를
        직접 작성할 필요 없음
        이미 구현된 메소드 사용하면 됨
        ㄴ여러 타입의 데이터 저장 가능

        ##컬렉션 인터페이스
        1.list 인터페이스
            순서가 있는 데이터(value) 집합
            순서가 유지되므로 데이터의 중복 저장을 허용
            하위 클래스 - Vector, ArrayList, LinkedList, Stack등

        2.Set  인터페이스
            순서 개념 없는 데이터(value) 집합
            순서가 유지되지 않고 데이터 중복 허용X
            하위 클래스 HashSet, TreeSet 등

        3.Map  인터페이스
            키(Key)와 값(value)이 한 쌍으로 이루어지는 데이터 집합
            Key를 Set방식으로 관리해서 순서유지 X 중복 허용X
            value는 중복허용
            하위 - HashMAp, TreeMap,HashTable, Properties 등




     */
}
