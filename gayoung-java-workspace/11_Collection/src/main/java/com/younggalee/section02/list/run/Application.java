package com.younggalee.section02.list.run;

public class Application {
    /*
        ## 컬렉션 프레임워크 ##
        1. 방대한 데이터들을 쉽고 효과적으로 처리할 수 있도록 표준화된 방법을 제공하는 클래스들의 집합
        2. 즉, 데이터를 효율적으로 저장하는 자료구조와 데이터를 효율적으로 처리하는 알고리즘이 미리 구현되어있음

        ## 배열과 컬랙션의 차이 ##
        1. 배열
           - 생성시 크기를 지정해야했고, 변경이 어려웠음 (크기에 대한 제약이 많았음)
           - 중간 위치에 데이터를 추가하거나 삭제할 경우 직접 코드 구현을 해야함.
           * 한가지 타입의 데이터만 저장 가능
        2. 컬렉션
           + 크기에 대한 제약이 없음 (크기 지정이 필수가 아니며 유동적으로 크기가 변경됨.)
           + 중간 위치에 데이터 추가 및 삭제 등에 대한 메소드가 이미 구현되어 있음. 그냥 사용하면 됨
           * 여러타입의 데이터 저장 가능 (Object 라서)

      ## 컬렉션 인터페이스 ##
      1. List 인터페이스 (컬렉션 하위)
         - 순서가 있는 데이터의 집합
         - 순서가 유지되므로 데이터의 중복 저장을 허용함
         - 하위 클래스 : Vector, ArrayList***, LinkedList, Stack 등
      2. Set 인터페이스 (컬렉션 하위)
         - 순서 없는 데이터의 집합
         - 순서가 유지되지 않고 데이터의 중복 저장을 허용하지 않음
         - 하위 클래스 : HashSet, TreeSet 등
      3. Map 인터페이스
         - key와 value 가 한 쌍으로 이루어지는 데이터 집합 (key는 식별자 같은 존재)
         - key는 Set방식으로 관리하므로 순서유지 되지 않고, 중복된 key를 허용하지 않음
         - value는 중복 허용
         - 하위 클래스 : HashMap***, TreeMap, HashTable, Properties** 등
     */
}
