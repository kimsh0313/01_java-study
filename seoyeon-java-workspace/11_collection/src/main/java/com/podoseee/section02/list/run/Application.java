package com.podoseee.section02.list.run;

public class Application {
    /*
        ## 컬렉션 프레임워크 ##
        1. Collection Framework
        2. 방대한 데이터들을 쉽고 효과적으로 처리할 수 있또록 표준화된 방법을 제공하는 클래스들의 집합
        3. 즉, 데이터를 효율적으로 저장하는 자료구조와 데이터를 효율적으로 처리하는 알고리즘을 미리 구현해되어있음

        ## 배열과 컬렉션의 차이 ##
        1. 배열
           1) 크기에 대한 제약이 많음 (크기지정필수, 크기변경불가 => 새배열만들고 복사 / 크게잡으면 메모리낭비)
           2) 중간 위치에 추가하거나 삭제할 경우 복잡한 로직의 코드를 작성해야됨 (직접 알고리즘을 구현)
           3) 한 타입의 데이터만 저장 가능
        2. 컬렉션
           1) 크기에 대한 제약이 없음 (크기지정필수x, 유동적으로 크기변경됨)
           2) 중간 위치에 데이터 추가 및 삭제 등 진행시 복잡한 로직의 코드를 직접 작성할 필요 없음
              이미 구현되어있는 메소드를 사용하면됨
           3) 여러 타입의 데이터 저장 가능

        ## 컬렉션 인터페이스 ##
        1. List 인터페이스
           - 순서 있는 데이터(value) 집합
           - 순서가 유지되므로 데이터의 중복 저장을 허용함
           - 하위 클래스 : Vector, ArrayList ***, LinkedList, Stack 등
        2. Set 인터페이스
           - 순서 없는 데이터(value) 집합
           - 순서가 유지되지 않고 데이터의 중복 저장을 허용하지 않음
           - 하위 클래스 : HashSet, TreeSet 등
        3. Map 인터페이스
           - 키(key)와 값(value) 한 쌍으로 이루어지는 데이터 집합
           - key를 Set 방식으로 관리하므로 순서유지 되지 않고 중복된 key를 허용하지 않음
           - value는 중복 허용
           - 하위 클래스 : HashMap ***, TreeMap, HashTable, Properties ** 등
        
     */
}
